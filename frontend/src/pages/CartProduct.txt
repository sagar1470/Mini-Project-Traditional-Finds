// import React, { useContext, useEffect, useState } from 'react'
// import SummaryApi from '../common'
// import Context from '../context'
// import { MdDelete } from "react-icons/md";
// import displayINRCurrency from '../helpers/displayCurrency'
// import { loadStripe } from '@stripe/stripe-js'
// import PlaceOrder from '../components/PlaceOrder';

// const CartProduct = (   
//   onClose,
//   qty1
// ) => {
//   const [data, setData] = useState([])
//   const [loading, setLoading] = useState(false)
//   const context = useContext(Context)
//   const loadingCart = new Array(context.cartProductCount).fill(null)

//   const [openPlaceOrder, setOpenPlaceOrder] = useState(false)
//   const [TotalPrice, setTotalPrice] = useState(0)
//   const [TotalQty, setTotalQty] = useState(0)

//   const [openPayment, setOpenPayment] = useState(true)



//   const fetchData = async () => {

//     const response = await fetch(SummaryApi.DisplayingAddedCartProduct.url, {
//       method: SummaryApi.DisplayingAddedCartProduct.method,
//       credentials: 'include',
//       headers: {
//         "content-type": 'application/json'
//       },
//     })
//     const responseData = await response.json()

//     if (responseData.success) {
//       setData(responseData.data)
//     }

//   }

//   useEffect(() => {
//     fetchData()

//   }, [])

//   const increaseQty = async (id, qty) => {

//     const response = await fetch(SummaryApi.UpdateCartProduct.url, {
//       method: SummaryApi.UpdateCartProduct.method,
//       credentials: 'include',
//       headers: {
//         "content-type": 'application/json'
//       },
//       body: JSON.stringify(
//         {
//           _id: id,
//           quantity: qty + 1
//         }
//       )
//     })
//     const responseData = await response.json()

//     if (responseData.success) {
//       fetchData()     
//     }
//   }

//   const decraseQty = async (id, qty) => {
//     if (qty >= 2) {
//       const response = await fetch(SummaryApi.UpdateCartProduct.url, {
//         method: SummaryApi.UpdateCartProduct.method,
//         credentials: 'include',
//         headers: {
//           "content-type": 'application/json'
//         },
//         body: JSON.stringify(
//           {
//             _id: id,
//             quantity: qty - 1
//           })
//       })
//       const responseData = await response.json()
//       if (responseData.success) {
//         fetchData()
//       }
//     }
//   }

//   const deleteCartProduct = async (id) => {
//     const response = await fetch(SummaryApi.DeleteCartProduct.url, {
//       method: SummaryApi.DeleteCartProduct.method,
//       credentials: 'include',
//       headers: {
//         "content-type": 'application/json'
//       },
//       body: JSON.stringify({
//         _id: id,
//       })
//     })
//     const responseData = await response.json()

//     if (responseData.success) {
//       fetchData()
//       context.fetchUserAddToCart()
//     }
//   }


//   const handlePayment = async () => {

//     const stripePromise = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);

//     const response = await fetch(SummaryApi.payment.url, {
//       method: SummaryApi.payment.method,
//       credentials: 'include',
//       headers: {
//         "content-type": 'application/json'
//       },
//       body: JSON.stringify({
//         cartItems: data
//       })
//     })

//     const responseData = await response.json()

//     if (responseData?.id) {
//       stripePromise.redirectToCheckout({ sessionId: responseData?.id })
//     }
//   }


//   const totalQty = data.reduce((previousValue, currentValue) => previousValue + currentValue.quantity, 0)
//   const totalPrice = data.reduce((preve, curr) => preve + (curr.quantity * curr?.productId?.sellingPrice), 0)



//   const handlePlaceOrder = async () => {
//     if(qty1 !== totalQty){
//       setOpenPayment(false)
//  }else
//  {
//    setOpenPayment(true)
//  }
//   }

//   useEffect(() => { setTotalPrice(totalPrice) 
//   }, [totalPrice])


//   useEffect(() => { 
//     setTotalQty(totalQty)
//   handlePlaceOrder()
//    }, [totalQty])




//   return (
//     <div className=' p-4 mt-14'>
//       <div className='text-center text-lg my-3'>
//         {
//           data.length === 0 && !loading && (
//             <p className='bg-white py-5'>No Data</p>
//           )
//         }
//       </div>

//       <div className='flex flex-col lg:flex-row gap-10 p-4'>
//         {/*view product  */}
//         <div className='w-full max-w-3xl'>
//           {
//             loading ? (
//               loadingCart?.map((el, index) => {
//                 return (
//                   <div key={el + "Add To Cart Loading" + index} className='w-full bg-slate-200 h-32 my-2 border border-slate-300 animate-pulse rounded'>
//                   </div>
//                 )
//               })

//             ) : (
//               data.map((product, index) => {
//                 return (

//                   <div key={product?._id + "Add To Cart Loading"} className='w-full bg-white h-32 my-2 border border-slate-300 rounded grid grid-cols-[128px,1fr]'>
//                     <div className='w-28 h-32 bg-slate-200'>
//                       <img src={product?.productId?.productImage[0]} alt='' className="w-full h-full object-scale-down mix-blend-multiply" />
//                     </div>


//                     <div className='px-4 py-2 relative'>
//                       <div className='absolute right-0 text-red-600 rounded-full p-2 hover:bg-red-600 hover:text-white cursor-pointer'
//                         onClick={() => deleteCartProduct(product?._id)} >
//                         <MdDelete />
//                       </div>


//                       <h2 className='text-lg lg:text-xl text-ellipsis line-clamp-1'>{product?.productId?.productName}</h2>
//                       <p className='capitalize text-slate-500'>{product?.productId?.category}</p>

//                       <div className='flex items-center justify-between'>
//                         <p className='text-red-600 font-medium text-lg'>{displayINRCurrency(product?.productId?.sellingPrice)}</p>
//                         <p className='text-slate-600 font-semibold text-lg'>{displayINRCurrency(product?.productId?.sellingPrice * product?.quantity)}</p>
//                       </div>

//                       <div className='flex items-center gap-3 mt-1'>
//                         <button className='border border-red-600 text-red-600 hover:bg-red-600 hover:text-white w-6 h-6 flex justify-center items-center rounded '
//                           onClick={() => decraseQty(product?._id, product?.quantity)} >-</button>
//                         <span>{product?.quantity}</span>

//                         <button
//                           className='border border-red-600 text-red-600 hover:bg-red-600 hover:text-white w-6 h-6 flex justify-center items-center rounded'
//                           onClick={() => increaseQty(product?._id, product?.quantity)} >+</button>
//                       </div>

//                     </div>



//                   </div>

//                 )
//               })
//             )}
//         </div>

//         {/* total product*/}
//         {
//           data[0] && (

//             <div className='mt-5 lg:mt-0 w-full max-w-sm' >
//               {
//                 loading ? (
//                   <div className='h-36 bg-slate-200 border border-slate-300 animate-pulse '>

//                   </div>
//                 ) : (
//                   <div className='h-36 bg-white'>
//                     <h2 className='text-white bg-red-600 px-4 py-1'>Summary</h2>
//                     <div className='flex items-center justify-between px-4 gap-2 font-medium text-lg text-slate-600'>
//                       <p>Quantity</p>
//                       <p>{totalQty}</p>
//                     </div>

//                     <div className='flex items-center justify-between px-4 gap-2 font-medium text-lg text-slate-600'>
//                       <p>Total Price</p>
//                       <p>{displayINRCurrency(totalPrice)}</p>
//                     </div>

//                     <div className='flex items-center justify-between px-4 gap-2 font-medium text-lg text-slate-600'>                           

//                         <button className='bg-blue-600 p-2 text-white w-full mt-2'
//                             onClick={() => {
//                               setOpenPlaceOrder(true)
//                               handlePlaceOrder()
//                             }}
//                           >Place Order</button>

//                         <button className='bg-blue-600 p-2 text-white w-full mt-2'
//                             onClick={handlePayment}
//                           >Payment</button>

//                     </div>
//                   </div>
//                 )
//               }
//             </div>

//           )
//         }
//       </div>
//       {
//         openPlaceOrder && (
//           <PlaceOrder onClose={() => { setOpenPlaceOrder(false) }} totalPrice={TotalPrice} totalQty={TotalQty} />
//         )
//       }
//     </div>
//   )
// }

// export default CartProduct